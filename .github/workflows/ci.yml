name: ci
permissions:
  contents: read
on:
  pull_request:
  push:
jobs:
  coverage:
    # Don't run duplicate `push` jobs for the repo owner's PRs.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ${{ matrix.host_os }}

    env:
      CC_ENABLE_DEBUG_OUTPUT: 1

    strategy:
      fail-fast: false
      matrix:
        features:
          # Enable all the library features so we can measure all the coverage.
          # Don't enable `slow_tests` and other (test suite) features that are
          # unuseful, or even counterproductive, for coverage testing.
          # `slow_tests` is slow and it is running code that is already intended
          # to be covered without it being enabled.
          - --features=std

        # TODO: targets
        target:
          - armv7-unknown-linux-gnueabihf  # Has assembly
          # - i686-unknown-linux-gnu       # Has assembly; handled specially below.

        mode:
          - # debug

        # Coverage collection is Nightly-only
        rust_channel:
          - nightly

        # TODO: targets
        include:
          - target: armv7-unknown-linux-gnueabihf
            host_os: ubuntu-24.04

          - features: --features=unstable-testing-arm-no-neon,std
            target: armv7-unknown-linux-gnueabihf
            mode: --release
            rust_channel: nightly
            host_os: ubuntu-24.04

          # TODO: Use the -musl target after
          # https://github.com/rust-lang/rust/issues/79556 and
          # https://github.com/rust-lang/rust/issues/79555 are fixed.
          - target: i686-unknown-linux-gnu
            cpu_model: # default
            features: --features=std
            mode: # debug
            rust_channel: nightly
            host_os: ubuntu-24.04

          - target: i686-unknown-linux-gnu
            cpu_model: coreduo-v1
            features: --features=std
            mode: --release
            rust_channel: nightly
            host_os: ubuntu-24.04

    steps:
      - if: ${{ contains(matrix.host_os, 'ubuntu') }}
        run: sudo apt-get update -y

      - uses: briansmith/actions-checkout@v4
        with:
          persist-credentials: false

      - run: RING_CPU_MODEL=${{ matrix.cpu_model }} RING_COVERAGE=1 mk/install-build-tools.sh +${{ matrix.rust_channel }} --target=${{ matrix.target }}
        shell: sh

      - if: ${{ contains(matrix.host_os, 'windows') && contains(matrix.target, '86') }}
        run: ./mk/install-build-tools.ps1

      - if: ${{ !contains(matrix.host_os, 'windows') }}
        run: |
          RING_CPU_MODEL=${{ matrix.cpu_model }} RING_COVERAGE=1 mk/cargo.sh +${{ matrix.rust_channel }} test --lib --tests -vv --target=${{ matrix.target }} ${{ matrix.cargo_options }} ${{ matrix.features }} ${{ matrix.mode }}

      - uses: briansmith/codecov-codecov-action@v4
        with:
          directory: ./target/${{ matrix.target }}/debug/coverage/reports
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
